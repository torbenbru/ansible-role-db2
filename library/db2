#!/usr/bin/python
import os
from os.path import expanduser

class Database:

    def __init__(self, module):

        self.module = module


    def start_instance(self):

        if not self.instance_up():
            # The start the instance first
            cmd = ". %s; db2start" % self.db2profile
            rc, stdout, stderr = self.module.run_command(cmd, use_unsafe_shell=True)
            if stderr != '' or rc!=0:
                self.module.fail_json(changed=False, msg="Error, could not startup the database",
                                      stderr=stderr, rc=rc, stdout=stdout)


    def instance_up(self):
        cmd = ". %s; ps -ef | grep $DB2INSTANCE | grep db2sysc | grep -v grep | wc -l" % self.db2profile
        rc, stdout, stderr = self.module.run_command(cmd, use_unsafe_shell=True)

        if stderr:
            self.module.fail_json(changed=False, msg='Could not validade if instance is up'
                                  , stderr=stderr, rc=rc, stdout=stdout)

        return '1' == stdout.strip()

    def is_db_already_created(self):

        cmd = ". %s; db2 list db directory | grep \"Database name\" | awk '{print $4}'" % self.db2profile
        rc, stdout, stderr = self.module.run_command(cmd, use_unsafe_shell=True)

        if stderr:
            self.module.fail_json(changed=False, msg=stderr)

        for db in stdout.strip().split('\n'):
            if db == self.db_name.upper():
                return True
        return False

    def find_db2_profile(self):

        user_home = self.find_db2_home()
        return os.path.join(user_home, "sqllib/db2profile")


    def find_db2_home(self):
        home = expanduser("~")
        return home

    def parse_params(self):

        self.db_name = self.module.params['name']
        self.instance = self.module.params['instance']
        self.automatic = self.module.params['automatic']
        self.alias = self.module.params['alias']
        self.path = self.module.params['path']
        self.pagesize = self.module.params['pagesize']
        self.codeset = self.module.params['codeset']
        self.territory = self.module.params['territory']
        self.db2profile = self.find_db2_profile()

def main():
    module = AnsibleModule(
        argument_spec=dict(
            instance=dict(required=True, type='str'),
            name=dict(required=True, type='str'),
            automatic=dict(required=False, default=True, type='bool'),
            alias=dict(required=False,default=True, type='str'),
            path=dict(required=False, default=None, type='str'),
            pagesize=dict(required=False, default=None, type='str'),
            codeset=dict(required=False, default=None, type='str'),
            territory=dict(required=False, default=None, type='str'),
        ),
        supports_check_mode=False,
        required_together=[['codeset', 'territory']]
    )

    db = Database(module)
    db.parse_params()

    # Only if the instance is down
    db.start_instance()

    if db.is_db_already_created():
        db.module.exit_json(changed=False, msg="Database %s already created, moving on!" % db.db_name)

    create_cmd = "db2 \"create database %s " % db.db_name
    options = ""
    # This is default True
    if not db.automatic:
        options += " automatic storage no"
    if db.path:
        options += " on %s" % db.path
    if db.alias:
        options += "alias %s " db.alias

        # Validate if automatic_storage == no then only one path can be used
        if not db.automatic:

            #Validate if path contains a comma separated value
            if "," in db.path:
                db.module.fail_json(changed=False, msg="If you don't want automatic storage "
                                                    "you can't create a Database on more than one path")
    if db.codeset:
        options += " using codeset %s" % db.codeset
    if db.territory:
        options += " territory %s" % db.territory
    if db.pagesize:
        options += " pagesize %s" % db.pagesize

    cmd = ". %s; %s %s \"" % (db.db2profile, create_cmd, options)

    rc, stdout, stderr = db.module.run_command(cmd, use_unsafe_shell=True)

    if stderr != '' or rc!=0:
        module.fail_json(changed=False, msg="CMD: %s Failure while creating database %s" % (cmd, db.db_name),
                         stderr=stderr, rc=rc, stdout = stdout)
    else:
        module.exit_json(changed=True, msg="Database %s created" % db.db_name, stdout=stdout, stderr=stderr)


from ansible.module_utils.basic import *

main()
